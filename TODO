* Annotate syscall return types

* First thing a child should do is allocate a buffer of random numbers
  to be used as syscall numbers.

* Based upon the first syscall the child is going to call, bias the subsequent
  random syscalls to be calls that use the return type from syscall 1.
  Ie, if syscall #1 is going to be a syscall that returns an fd, do a bunch
  of syscalls that work on fd's.
  This will give us a sort of auto-grouping of syscalls.

* Record the results of syscalls that return an object to be handed out
  to subsequent syscalls/other child tasks. 
  TODO: lifetime rules ? destroy on child exit ?

* Struct fabrication
  Some syscalls are rejecting immediately because we aren't passing them
  a struct they're expecting. This requires us to create a few new methods.
  .constructor:
	Before we do the syscall, we need a constructor method
	to allocate and fake one.
  .destructor:
	Likewise, we need destructors to prevent resource leaks.

  On return from the syscall, we don't call the destructor immediately.
  We pick a small random number, and do N other syscalls before we do the destruction.
  This requires us to create a list of work to be done later, along with a pointer
  to any allocated data.
  .post:
	Recieves the retval from the syscall, and handles appropriately.
	Pick a small random number for the lifetime of the resource
	Store any allocated resources in the 'to be destroyed' list.

* Rewrite the fd generation code.
  - Don't generate so many fd's (faster startup)
  - make a list of filenames during fd_setup, so that we can pass one at random
    when sanitising open()
  - When requesting an fd, occasionally generate a new one.
  - If present, look in /mnt/test too, so we can test some filesystems like nfs.

* generate overlapping addresses/lengths.

* There are a few syscalls with duplicate '64' variants.
  They take the same arguments, and vary only in name.
  Two possibilities.
  1. what I did for fcntl[64] in 22b4b44ececaf59f9178f52788e3bcfe92535574
  2. leave the dupes, just for the sake of getting the ->name right.

* -b is broken. We need to do the same number of rand() calls we did in
  the calls we're skipping, which is pretty much impossible without
  doing them when we're using -i.  Maybe just be silent until we get
  to the point of -b ?

* Store a field in the syscall definition on when it was added upstream.
  This will allow for things like "just fuzz syscalls added since 2.6.32"
  It won't be much use on kernels that have them backported, but that's
  not a big deal. We could do a ENOSYS test.

* Store the pids of the children, and hand them out in ARG_PID

* Arch specific TODO
  x86-64: Build both a 64bit and a 32bit executable.
  *: Move arch specific syscalls into syscalls/arch/

* --ignore-socketcache
* --monochrome

* Perform some checks on return from syscall
  - check padding between struct members is zeroed.
  - Set regs that should be preserved across syscalls to a known value, and check
    on return whether any of them got clobbered.
  - Check for corruption patterns (LIST_DEBUG, SLAB_POISON)

* Add a parameter to bias the randomness passed to length parameters.
  Right now it's hardwired to return 16 bit 70% of the time.
  (and 32bit in the 64bit path)

* Add a parameter for the dir/file randomness bias

* Make -k use random kernel addresses (from System.map ?)

* --oneshot
  ./trinity --oneshot sys_futex -1,0x40000000,1,2,3,4

* --info sys_open
   i386:   5
   x86-64: 239
   ppc64:  5

* Xen dom0 hypercalls ?

* Other arch support. S390? fully native PPC64? (PPC64 currently requires 32-bit glibc-kernheaders)

* Ability to pass a list of comma separated syscalls on the command-line.

* run tests in different namespaces, personalities.

* --blacklist=open,read,write

* Log timestamps along with each syscall.

Experiments:
* Add option to exhaust memory in child to try and run syscalls in low memory situations.

* Safety checks for buffers we pass to the kernel
- mprotect them
- add guard pages before/after, and add poison to be checked on return.
  (Note, in some cases the kernel will write before/after buffers passed, because
   libc has set things up that way, so it's expected)

