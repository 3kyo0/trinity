* Convert the syscall lists for all archs over to the new-style (see x86-64)
  The lack of .num_args probably breaks scrashme on those archs right now.

* Make -k use random kernel addresses (from System.map ?)

* --oneshot
  ./scrashme --oneshot sys_futex -1,0x40000000,1,2,3,4

* --info sys_open
   i386:   5
   x86-64: 239
   ppc64:  5

* Colorise some output
  - Highlight odd looking return values

* --check-clobber
  Set regs that should be preserved across syscalls to a known value, and check
  on return whether any of them got clobbered.

* --logfile

* --nrsyscalls (set NR_SYSCALLS)
  Hmm, maybe --kver=2.6.9 to set the nr to the nr syscalls in that rev ?

* flush() & fsync() before making the call

* if we get -EPERM from a syscalls we know checks for CAP_SYS_ADMIN early,
  don't bother retrying it.

* Reduce amount of output from -C
  The values passed aren't very interesting. (maybe add a --debug?)

* add a switch to use 32bit syscall entry point on x86-64
  This will require us to use assembly instead of syscall() again.

* Pass "interesting" 32 bit patterns.
	80000000
	80000001
	8fffffff

* Pass "interesting" 64 bit patterns.
	0000000100000000
	00000001ffffffff
	0000000800000000 (non canonical RIP?)
	8000000000000000
	80000000ffffffff
	ffffffff00000000
	ffffffff7fffffff
	ffffffffffffffff
	fffffff7ffffffff (non canonical RIP?)

* Enhance the -i(ntelligence) option.
  * For -i make 'len' parameters try 'interesting' parameters rather than just random
    (ULONG_MAX, INT_MAX etc in the hope to exploit overflows)
    Possibly introduce yet another option, as random len's are also useful.

* Due to forking of child processes, things like mmap/mprotect etc
  don't do anything to affect future calls.
  - Maybe add a --no-children to prevent forking?
  - Or possibly a new syscall flag 'DONTFORK' for mm related syscalls ?
  - Or possibly a --vm mode to only call VM related calls.

* Xen dom0 hypercalls ?

* Other arch support. S390? fully native PPC64? (PPC64 currently requires 32-bit glibc-kernheaders)

* some of the syscalls allocate a chunk of memory. When we pass garbage, this could add up to
  huge amounts of ram, which then mean we trigger the oom killer.
  This isn't really desirable (nor is it a bug). We should possibly set some ulimits before
  running the test harness.
  (If we want to be really clever, somehow track the allocations, and then free them N syscalls later)

* Ability to pass a list of comma separated syscalls on the command-line.

* syscall groups.
  --group=vm  for example would only call memory management related syscalls.

